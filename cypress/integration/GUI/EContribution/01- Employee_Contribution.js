///<reference types = "cypress"/>
import Dashboard from '../Utility/Dashboard'
import Menu from '../PageObject/DashboardPage'
import Contribution from '../PageObject/ContributionPage'
import AddContribution from '../PageObject/AddContributionPage'
describe('Contribution feature for Employee',function(){
    it('LB-90 : As Employee, user should able to add contribution',function(){
        const page = new Dashboard()
        const menu = new Menu()
        const cn = new Contribution()
        const fy = new AddContribution()
        page.Employee()
        cy.get("span[class='fs-4']").should('contain','Welcome')    
        cy.title().should('eq','Knoldus Leaderboard')
        menu.BoardDropdown()    
        menu.contribution()
        cy.wait(1000)
        cn.AddContribution()
        fy.ContributionType('Meetup')
        fy.Title('API Testing')
        fy.ContributionDate('2022-03-16')
        fy.Technology('Selenium,Postman')
        fy.UrlDetail()
        fy.Submit()
        cy.get('.ng-trigger').should('contain','Successfully added contribution!')
    })
    it('LB-93 : User should not able to add contribution with empty fields',function(){
        const page = new Dashboard()
        const menu = new Menu()
        const cn = new Contribution()
        const fy = new AddContribution()
        page.Employee()  
        cy.get("span[class='fs-4']").should('contain','Welcome')    
        cy.title().should('eq','Knoldus Leaderboard')
        menu.BoardDropdown() 
        menu.contribution()
        cy.wait(1000)
        cn.AddContribution()
        fy.ContributionType('')
        cy.get('input[formcontrolname="title"]').click()
        fy.ContributionDate('2022-04-18')
        cy.get('.d-flex > :nth-child(1) > .errorMessage').should('have.text',' Contribution Type is Required')
        cy.get('.mt-4 > :nth-child(1) > .errorMessage').should('have.text','Title is Required')
        fy.Technology('Selenium,demo')
    })
    it('LB-95 : Title field text should not be more than 200 characters',function(){
        const page = new Dashboard()
        const menu = new Menu()
        const cn = new Contribution()
        const fy = new AddContribution()
        page.Employee() 
        cy.get("span[class='fs-4']").should('contain','Welcome')    
        cy.title().should('eq','Knoldus Leaderboard')
        menu.BoardDropdown()
        menu.contribution()
        cy.wait(1000)
        cn.AddContribution()
        fy.ContributionType('Book')  
        fy.Title('A paragraph is a self-contained unit of discourse in writing dealing with a particular point or idea. A paragraph consists of one or more sentences. Though not required by the syntax of any language, paragraphs are usually an expected part of formal writing, used to organize longer prose.')
        cy.get('.errorMessage').should('have.text','Exceeded the maxlength!')
        fy.ContributionDate('2022-03-21')
        fy.Technology('Selenium, testing')
        fy.UrlDetail()
    })     
    it('LB-97 : As Employee, user should able to view his contributions',function(){
        const page = new Dashboard()
        const menu = new Menu()
        const cn = new Contribution()
        page.Employee()
        cy.get("span[class='fs-4']").should('contain','Welcome')    
        cy.title().should('eq','Knoldus Leaderboard')
        menu.BoardDropdown()               
        menu.contribution()  
        cy.wait(1000)
        cy.get('[title="STATUS"] > .datatable-header-cell-template-wrap > .datatable-header-cell-wrapper > .datatable-header-cell-label').should('have.text','STATUS')
        cy.get(':nth-child(1) > .datatable-body-row > .datatable-row-center > [style="width: 100px; height: 45px;"] > .datatable-body-cell-label').then(($i) =>{
            const obj = $i.text()
            cy.log(obj).should('have.text',obj)
        })
        cy.get(':nth-child(2) > .datatable-body-row > .datatable-row-center > [style="width: 100px; height: 45px;"] > .datatable-body-cell-label').then(($ito) =>{
            const obj2 = $ito.text()
            cy.log(obj2).should('have.text',obj2)
        })
        cn.View()
        cy.wait(500)
        cn.Exit()
        cy.scrollTo('bottom')
    })
    it('LB-106 : As Employee, user should able to edit his own contribution',function(){
        const page = new Dashboard()
        const menu = new Menu()
        const cn = new Contribution()
        const fy = new AddContribution()
        page.Employee()
        cy.get("span[class='fs-4']").should('contain','Welcome')    
        cy.title().should('eq','Knoldus Leaderboard')
        menu.BoardDropdown()    
        menu.contribution()
        cy.wait(1000)
        cy.get(':nth-child(1) > .datatable-body-row > .datatable-row-center > [style="width: 100px; height: 45px;"] > .datatable-body-cell-label > .badge').should('have.text','Pending')
        cn.Edit()       
        fy.Title('Cypress11')                                                             
        fy.Technology('Javascript, Frond-end testing')
        fy.Submit()
        cy.get('.ng-trigger > .ng-tns-c18-0').should('have.text',' Updated Successfully!!!! ')
    })
    it('LB-111 : User should not able to edit his contribution with empty fields',function(){
        const page = new Dashboard()
        const menu = new Menu()
        const cn = new Contribution()
        const fy = new AddContribution()
        page.Employee()
        cy.get("span[class='fs-4']").should('contain','Welcome')    
        cy.title().should('eq','Knoldus Leaderboard')
        menu.BoardDropdown() 
        menu.contribution()
        cy.wait(1000)
        cy.get(':nth-child(1) > .datatable-body-row > .datatable-row-center > [style="width: 100px; height: 45px;"] > .datatable-body-cell-label > .badge').should('have.text','Pending') 
        cn.Edit()
        cy.get('input[formcontrolname="title"]').clear()    
        fy.ContributionDate('2022-03-21')                             
        cy.get('.errorMessage').should('contain','Title is Required')
    })
    it('LB-112 : User should not able to edit his own contribution if the URL is already exist in the database',function(){
        const page = new Dashboard()
        const menu = new Menu()
        const cn = new Contribution()
        const fy = new AddContribution()
        page.Employee()
        cy.get("span[class='fs-4']").should('contain','Welcome')    
        cy.title().should('eq','Knoldus Leaderboard')
        menu.BoardDropdown() 
        menu.contribution()
        cy.wait(1000)
        cy.get(':nth-child(1) > .datatable-body-row > .datatable-row-center > [style="width: 100px; height: 45px;"] > .datatable-body-cell-label > .badge').should('have.text','Pending') 
        cn.Edit()
        fy.Title('Demo Title')                                                             
        fy.Technology('Scala')
        cy.get('.col.mb-3 > .form-control').clear().type('http://does.com/')
        fy.Submit()
        cy.get('.ng-trigger > .ng-tns-c18-0').should('have.text',' Contribution with same url already exist ')
    })    
    it('LB-101 : As Employee, user should not able to approve/reject contribution',function(){
        const page = new Dashboard()
        const menu = new Menu()
        page.Employee()
        cy.get("span[class='fs-4']").should('contain','Welcome')    
        cy.title().should('eq','Knoldus Leaderboard')
        menu.BoardDropdown()  
        menu.contribution()
        cy.log('No access for employee')
    })
    it('LB-117 : As Employee, user should able to view all contributions across Knoldus',function(){
        const page = new Dashboard()
        const menu = new Menu()
        const cn = new Contribution()
        page.Employee()
        cy.get("span[class='fs-4']").should('contain','Welcome')    
        cy.title().should('eq','Knoldus Leaderboard')
        menu.BoardDropdown()   
        menu.contribution()
        cy.wait(1000)
        cn.AllContribution()
        cy.wait(1000)
        cy.get(':nth-child(1) > .datatable-body-row > .datatable-row-center > :nth-child(1) > .datatable-body-cell-label').then(($top)=>{
            const title = $top.text()
            cy.log(title).should('have.text',title)
        })
        cy.get(':nth-child(1) > .datatable-body-row > .datatable-row-center > :nth-child(3) > .datatable-body-cell-label').then(($num)=>{
            const date = $num.text()
            cy.log(date).should('have.text',date)
        })
        cy.get(':nth-child(1) > .datatable-body-row > .datatable-row-center > :nth-child(4)').then(($span) => {
            const url = $span.text()
            cy.log(url).should('have.text',url)
        })
        cy.get(':nth-child(1) > .datatable-body-row > .datatable-row-center > :nth-child(5)').then(($int)=>{
            const name = $int.text()
            cy.log(name).should('have.text',name)
        })
        cy.scrollTo('bottom')
    })
})